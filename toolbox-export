#!/usr/bin/env python3

__license__ = 'MIT'

import tempfile
import io
import os
import argparse
import shutil
import subprocess

try:
    from PIL import Image
    from xdg.DesktopEntry import DesktopEntry
    from xdg.BaseDirectory import xdg_data_home
    from xdg import BaseDirectory
    import xdg.IconTheme
except ImportError:
    exit(
        'Could not find python dependencies, run "pip install -r requirements.txt"'
    )

# TODO separate in already installed and newly installed
installed_paths = []


def already_installed(new_file, resource: str) -> bool:
    new_data = new_file.read()

    for x in BaseDirectory.load_data_paths(resource):
        if '/usr/' not in x:
            try:
                with open(x) as f:
                    old_data = f.read()
            except:
                continue
            if old_data == new_data:
                return True
    return False


def install(new_file, path: str, resource: str):
    new_data = new_file.read()
    home = os.environ.get('HOME')

    def r(path: str):
        return path.replace(home, '~')

    message_n = 'Already installed: {}'.format(r(path))
    message_y = 'Installed: {}'.format(r(path))

    if path in installed_paths:
        print(message_n) # FIXME
        return
    try:
        with open(path, 'rb') as f:
            if f.read() == new_data:
                print(message_n)
                installed_paths.append(path)
                return

    except FileNotFoundError:
        pass
    if already_installed(new_file, resource):
        print(message_n)
        installed_paths.append(path)
        return
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'wb') as f:
        f.write(new_data)
        print(message_y)
        installed_paths.append(path)


def handle_pixmaps(pixmap: str, size: int):
    img = Image.open(pixmap)
    if size == 'scalable':
        resource = 'icons/hicolor/scalable/apps'
    else:
        resource = 'icons/hicolor/{}x{}/apps'.format(size, size)
    pixmap_size = img.size[0]
    ext = os.path.splitext(pixmap)[1]
    new_ext = '.png' if type(size) is int else '.svg'
    pillow_ext = new_ext.replace('.', '').upper()
    icon_name = pixmap.split('/')[-1].replace(ext, new_ext)
    new_icon_path = os.path.join(
        BaseDirectory.save_data_path(resource), icon_name
    )
    if size == 'scalable':
        if ext == '.svg':
            img = img.resize((size, size))
        else:
            return
    elif pixmap_size % size == 0:
        if pixmap_size != size:
            img = img.resize((size, size))
    else:
        return

    with tempfile.NamedTemporaryFile() as tmp_f:
        img.save(tmp_f.name, pillow_ext)
        install(tmp_f, new_icon_path, resource)


def copy_icons(app: str):
    sizes = [16, 24, 32, 48, 64, 96, 128, 256, 512, 'scalable']
    for size in sizes:
        if type(size) is int:
            icon_path = xdg.IconTheme.getIconPath(app, size=size)
        else:
            icon_path = xdg.IconTheme.getIconPath(app, extensions=['svg'])

        if icon_path is None:
            continue
        elif '/pixmaps/' in icon_path:
            handle_pixmaps(icon_path, size)
            continue

        icon_file_name = os.path.basename(icon_path)
        if '/usr' in icon_path:
            resource = icon_path.replace('/usr/share/', '')
        elif BaseDirectory.save_data_path('') in icon_path:
            resource = icon_path.replace(BaseDirectory.save_data_path(''), '')
        resource = resource.replace(icon_file_name, '')
        new_icon_path = os.path.join(
            BaseDirectory.save_data_path(resource), icon_file_name
        )

        try:
            with open(icon_path, 'br') as icon:
                install(icon, new_icon_path, resource)
        except FileNotFoundError:
            pass


# Taken from https://github.com/takluyver/pyxdg/blob/master/xdg/Mime.py
def copy_mime(app: str):
    application = app + '.xml'
    package_file = os.path.join('/usr/share', 'mime', 'packages', application)
    resource = os.path.join('mime', 'packages')
    new_file = os.path.join(
        BaseDirectory.save_data_path(resource), application
    )
    try:
        with open(package_file, 'br') as f:
            install(f, new_file, resource)
    except FileNotFoundError:
        pass

    # Update the database...
    command = 'update-mime-database'
    if os.spawnlp(
        os.P_WAIT, command, command, BaseDirectory.save_data_path('mime')
    ):
        os.unlink(new_file)
        raise Exception(
            "The '%s' command returned an error code!\n"
            "Make sure you have the freedesktop.org shared MIME package:\n"
            "http://standards.freedesktop.org/shared-mime-info/" % command
        )


def copy_desktop_file(app: str):
    application = app + '.desktop'
    resource = 'applications'
    app_path = os.path.join('/usr/share/', resource, application)
    if not os.path.exists(app_path):
        return
    desktop_file = DesktopEntry(app_path)

    for entry in desktop_file.content:
        if 'Exec' in desktop_file.content[entry]:
            exec_field = desktop_file.content[entry]['Exec']
            desktop_file.content[entry]['Exec'] = 'toolbox run ' + exec_field
        if 'TryExec' in desktop_file.content[entry]:
            exec_field = desktop_file.content[entry]['TryExec']
            desktop_file.content[entry]['TryExec'] = 'toolbox'

    new_path = os.path.join(
        BaseDirectory.save_data_path(resource), application
    )

    with tempfile.NamedTemporaryFile() as tmp_f:
        desktop_file.write(tmp_f.name)
        install(tmp_f, new_path, resource)
    # TODO check if this does anything
    command = [
        'update-desktop-database',
        BaseDirectory.save_data_path(resource),
    ]
    try:
        subprocess.run(command, check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print('Failed to run', ' '.join(command))


def get_icon_name(app: str) -> str:
    application = app + '.desktop'
    app_path = os.path.join('/usr/share/applications', application)
    desktop_file = DesktopEntry(app_path)
    if 'Desktop Entry' not in desktop_file.content:
        return
    if 'Icon' in desktop_file.content['Desktop Entry']:
        return desktop_file.content['Desktop Entry']['Icon']
    else:
        return app


def copy_metadata(app: str):
    for resource in ['appdata', 'metainfo']:
        application = app + '.' + resource + '.xml'
        xml_dir = os.path.join('/usr/share', resource)
        metadata_path = os.path.join(xml_dir, application)
        new_metadata_path = os.path.join(
            BaseDirectory.save_data_path(resource), application
        )
        try:
            with open(metadata_path, 'br') as f:
                install(f, new_metadata_path, resource)
        except FileNotFoundError:
            pass


def main():

    # if not os.path.exists('/README.md'):
    if os.environ.get('TOOLBOX_PATH') is None:
        exit('Not inside a toolbox container')

    parser = argparse.ArgumentParser()
    parser.add_argument('application', help='application to export', nargs='?')
    parser.add_argument(
        '--list',
        action='store_true',
        help='list desktop files inside the toolbox',
    )
    opts = parser.parse_args()

    if opts.list:
        for f in os.listdir('/usr/share/applications'):
            print(f.replace('.desktop', ''))
        exit()

    if not opts.application:
        exit('Specify an application. See --help for additional information')

    app = opts.application
    copy_desktop_file(app)
    app_icon = get_icon_name(app)
    copy_icons(app_icon)
    copy_mime(app)
    copy_metadata(app)


if __name__ == "__main__":
    main()
